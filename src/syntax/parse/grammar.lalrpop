use syntax::concrete::{Declaration, Exposing, Module, Term, ReplCommand};

grammar();

pub ReplCommand: ReplCommand = {
    <Term> => ReplCommand::Eval(Box::new(<>)),
    ":?" => ReplCommand::Help,
    ":h" => ReplCommand::Help,
    ":help" => ReplCommand::Help,
    "" => ReplCommand::NoOp,
    ":q" => ReplCommand::Quit,
    ":quit" => ReplCommand::Quit,
    ":t" <Term> => ReplCommand::TypeOf(Box::new(<>)),
    ":type" <Term> => ReplCommand::TypeOf(Box::new(<>)),
};

pub Module: Module = {
    "module" <name: Ident> ";" <declarations: Declaration*> => {
        Module { name, declarations }
    },
};

pub Declaration: Declaration = {
    "import" <name: Ident> <rename: ("as" <Ident>)?> <exposing: Exposing?> ";" => {
        Declaration::Import(name, rename, exposing)
    },
    <name: Ident> ":" <term: Term> ";" => {
        Declaration::Claim(name, term)
    },
    <name: Ident> <params: AtomicLamParam*> "=" <term: Term> ";" => {
        Declaration::Definition(name, params, term)
    },
};

Exposing : Exposing = {
    "(" ".." ")" => Exposing::All,
    "(" <names: (<ExposedIdent> ",")*> <last: ExposedIdent> => {
        let mut names = names;
        names.push(last);
        Exposing::Exact(names)
    }
};

ExposedIdent : (String, Option<String>) = {
    <Ident> <("as" <Ident>)?>
};

pub Term: Term = {
    LamTerm,
    <x: LamTerm> ":" <t: Term> => {
        Term::Ann(Box::new(x), Box::new(t))
    },
};

LamTerm: Term = {
    PiTerm,
    r"\\" <name: Ident> ":" <ann: PiTerm> "=>" <body: LamTerm> => {
        Term::Lam(vec![(vec![name], Some(Box::new(ann)))], Box::new(body))
    },
    r"\\" <params: AtomicLamParam+> "=>" <body: LamTerm> => {
        Term::Lam(params, Box::new(body))
    },
};

PiTerm: Term = {
    AppTerm,
    // Naively we would want to write the following rules:
    //
    // ```lalrpop
    // "(" <names: Ident+> ":" <ann: PiTerm> ")" "->" <body: LamTerm> => {
    //      Term::Pi(names, Box::new(ann), Box::new(body))
    //  },
    //  <ann: AppTerm> "->" <body: LamTerm> => {
    //      Term::Arrow(Box::new(ann), Box::new(body))
    //  },
    // ```
    //
    // Alas this causes an ambiguity with the `AtomicTerm` rule. Therefore we
    // have to hack this in by reparsing the binder:
    <binder: AppTerm> "->" <body: LamTerm> =>? {
        super::reparse_pi_type_hack(binder, body)
    },
    "Type" <level: r"[0-9]+"> => {
        Term::Universe(Some(level.parse().unwrap()))
    },
};

AppTerm: Term = {
    AtomicTerm,
    <f: AppTerm> <arg: AtomicTerm> => {
        Term::App(Box::new(f), Box::new(arg))
    },
};

AtomicTerm: Term = {
    "(" <Term> ")" => Term::Parens(Box::new(<>)),
    "Type" => Term::Universe(None),
    Ident => Term::Var(<>),
};

AtomicLamParam: (Vec<String>, Option<Box<Term>>) = {
    <name: Ident> => (vec![name], None),
    "(" <names: Ident+> ":" <ann: PiTerm> ")" => (names, Some(Box::new(ann))),
};

Ident: String = {
    r"[a-zA-Z][a-zA-Z0-9_-]*" => String::from(<>),
};
