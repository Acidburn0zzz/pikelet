use lalrpop_util::ParseError;

use syntax::concrete::{Declaration, Module, Term, ReplCommand};

grammar();

pub ReplCommand: ReplCommand = {
    <Term> => ReplCommand::Eval(Box::new(<>)),
    ":?" => ReplCommand::Help,
    ":h" => ReplCommand::Help,
    ":help" => ReplCommand::Help,
    "" => ReplCommand::NoOp,
    ":q" => ReplCommand::Quit,
    ":quit" => ReplCommand::Quit,
    ":t" <Term> => ReplCommand::TypeOf(Box::new(<>)),
    ":type" <Term> => ReplCommand::TypeOf(Box::new(<>)),
};

pub Module: Module = {
    "module" <name: Ident> ";" <declarations: Declaration*> => {
        Module { name, declarations }
    },
};

pub Declaration: Declaration = {
    <name: Ident> ":" <term: Term> ";" => {
        Declaration::Claim(name, term)
    },
    <name: Ident> <params: AtomicLamParam*> "=" <term: Term> ";" => {
        Declaration::Definition(name, params, term)
    },
};

pub Term: Term = {
    LamTerm,
    <x: Term> ":" <t: LamTerm> => {
        Term::Ann(Box::new(x), Box::new(t))
    },
};

AtomicLamParam: (String, Option<Box<Term>>) = {
    <name: Ident> => (name, None),
    "(" <name: Ident> ":" <ann: PiTerm> ")" => (name, Some(Box::new(ann))),
};

LamTerm: Term = {
    PiTerm,
    r"\\" <name: Ident> ":" <ann: PiTerm> "=>" <body: LamTerm> => {
        Term::Lam(vec![(name, Some(Box::new(ann)))], Box::new(body))
    },
    r"\\" <params: AtomicLamParam+> "=>" <body: LamTerm> => {
        Term::Lam(params, Box::new(body))
    },
};

PiTerm: Term = {
    AppTerm,
    // Naively we would want to write the following rules:
    //
    // ```lalrpop
    // "(" <names: Ident+> ":" <ann: PiTerm> ")" "->" <body: LamTerm> => {
    //      Term::Pi(names, Box::new(ann), Box::new(body))
    //  },
    //  <ann: AppTerm> "->" <body: LamTerm> => {
    //      Term::Arrow(Box::new(ann), Box::new(body))
    //  },
    // ```
    //
    // Alas this causes an ambiguity with the `AtomicTerm` rule. Therefore we
    // have to hack this in by reparsing the binder:
    <binder: AppTerm> "->" <body: LamTerm> =>? {
        fn param_names<L, T>(term: Term, names: &mut Vec<String>) -> Result<(), ParseError<L, T, &'static str>> {
            match term {
                Term::Var(name) => names.push(name),
                Term::App(fn_expr, arg) => {
                    param_names(*fn_expr, names)?;
                    param_names(*arg, names)?;
                },
                _ => return Err(ParseError::User {
                    error: "identifier expected in pi type", // TODO: better error!
                }),
            }
            Ok(())
        }

        match binder {
            Term::Parens(term) => {
                let term = *term; // HACK: see https://github.com/rust-lang/rust/issues/16223
                match term {
                    Term::Ann(params, ann) => {
                        let mut names = Vec::new();
                        param_names(*params, &mut names)?;
                        Ok(Term::Pi(names, ann, Box::new(body)))
                    },
                    ann => Ok(Term::Arrow(Box::new(Term::Parens(Box::new(ann))), Box::new(body))),
                }
            }
            ann => Ok(Term::Arrow(Box::new(ann), Box::new(body))),
        }
    },
};

AppTerm: Term = {
    AtomicTerm,
    <f: AppTerm> <arg: AtomicTerm> => {
        Term::App(Box::new(f), Box::new(arg))
    },
};

AtomicTerm: Term = {
    "(" <Term> ")" => Term::Parens(Box::new(<>)),
    "Type" => Term::Universe,
    Ident => Term::Var(<>),
};

Ident: String = {
    r"[a-zA-Z][a-zA-Z0-9_-]*" => String::from(<>),
};
