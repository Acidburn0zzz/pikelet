use codespan::FileMap;
use codespan::{ByteIndex, ByteSpan};

use syntax::concrete::{Declaration, Exposing, Literal, Module, Term, ReplCommand};
use syntax::parse::{LalrpopError, ParseError, Token};

grammar<'err, 'input>(errors: &'err mut Vec<ParseError>, filemap: &'input FileMap);

extern {
    type Location = ByteIndex;
    type Error = ParseError;

    enum Token<&'input str> {
        // Data
        "identifier" => Token::Ident(<&'input str>),
        "doc comment" => Token::DocComment(<&'input str>),
        "REPL command" => Token::ReplCommand(<&'input str>),
        "string literal" => Token::StringLiteral(<String>),
        "character literal" => Token::CharLiteral(<char>),
        "decimal literal" => Token::DecLiteral(<u64>),
        "float literal" => Token::FloatLiteral(<f64>),

        // Keywords
        "as" => Token::As,
        "_" => Token::Hole,
        "module" => Token::Module,
        "import" => Token::Import,
        "Type" => Token::Type,

        // Symbols
        "\\" => Token::BSlash,
        ":" => Token::Colon,
        "," => Token::Comma,
        ".." => Token::DotDot,
        "=" => Token::Equal,
        "->" => Token::LArrow,
        "=>" => Token::LFatArrow,
        ";" => Token::Semi,

        // Delimiters
        "(" => Token::LParen,
        ")" => Token::RParen,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "[" => Token::LBracket,
        "]" => Token::RBracket,
    }
}

pub ReplCommand: ReplCommand = {
    => ReplCommand::NoOp,
    <term: Term> => ReplCommand::Eval(Box::new(term)),
    <start: @L> <command: "REPL command"> <end: @R> =>? match command {
        "?" | "h" | "help" => Ok(ReplCommand::Help),
        "q" | "quit" => Ok(ReplCommand::Quit),
        command => {
            let span = ByteSpan::new(start, end);
            let command = String::from(command);
            Err(LalrpopError::User { error: ParseError::UnknownReplCommand { span, command} })
        },
    },
    <start: @L> <command: "REPL command"> <end: @R> <term: Term> =>? match command {
        "t" | "type" => Ok(ReplCommand::TypeOf(Box::new(term))),
        command => {
            let span = ByteSpan::new(start, end);
            let command = String::from(command);
            Err(LalrpopError::User { error: ParseError::UnknownReplCommand { span, command} })
        },
    },
};

pub Module: Module = {
    <_comment: "doc comment"*>
    "module" <name: ByteSpannedIdent> ";"
    <declarations: Declaration*> => {
        Module::Valid { name, declarations }
    },
};

pub Declaration: Declaration = {
    <start: @L> "import" <name: ByteSpannedIdent> <rename: ("as" <ByteSpannedIdent>)?>
        <exposing: Exposing?> <end: @R> ";" =>
    {
        Declaration::Import { span: ByteSpan::new(start, end), name, rename, exposing }
    },
    <_comment: "doc comment"*>
    <name: ByteSpannedIdent> ":" <ann: Term> ";" => {
        Declaration::Claim { name, ann }
    },
    <name: ByteSpannedIdent> <params: AtomicLamParam*> "=" <body: Term> ";" => {
        Declaration::Definition { name, params, body }
    },
    <start: @L> <recovered: !> <end: @R> ";" => {
        errors.push(super::errors::from_lalrpop(filemap, recovered.error));
        Declaration::Error(ByteSpan::new(start, end))
    }
};

Exposing : Exposing = {
    <start: @L> "(" ".." ")" <end: @R> => Exposing::All(ByteSpan::new(start, end)),
    <start: @L> "(" <names: (<ExposedIdent> ",")*> <last: ExposedIdent> <end: @R> => {
        let mut names = names;
        names.push(last);
        Exposing::Exact(ByteSpan::new(start, end), names)
    },
    <start: @L> <recovered: !> <end: @R> => {
        errors.push(super::errors::from_lalrpop(filemap, recovered.error));
        Exposing::Error(ByteSpan::new(start, end))
    },
};

ExposedIdent : ((ByteSpan, String), Option<(ByteSpan, String)>) = {
    <ByteSpannedIdent> <("as" <ByteSpannedIdent>)?>
};

pub Term: Term = {
    LamTerm,
    <x: LamTerm> ":" <t: Term> => {
        Term::Ann(Box::new(x), Box::new(t))
    },
};

LamTerm: Term = {
    PiTerm,
    <start: @L> "\\" <name: ByteSpannedIdent> ":" <ann: PiTerm> "=>" <body: LamTerm> => {
        Term::Lam(start, vec![(vec![name], Some(Box::new(ann)))], Box::new(body))
    },
    <start: @L> "\\" <params: AtomicLamParam+> "=>" <body: LamTerm> => {
        Term::Lam(start, params, Box::new(body))
    },
};

PiTerm: Term = {
    AppTerm,
    // Naively we would want to write the following rules:
    //
    // ```lalrpop
    // "(" <names: Ident+> ":" <ann: PiTerm> ")" "->" <body: LamTerm> => {
    //      Term::Pi(names, Box::new(ann), Box::new(body))
    //  },
    //  <ann: AppTerm> "->" <body: LamTerm> => {
    //      Term::Arrow(Box::new(ann), Box::new(body))
    //  },
    // ```
    //
    // Alas this causes an ambiguity with the `AtomicTerm` rule. Therefore we
    // have to hack this in by reparsing the binder:
    <start: @L> <binder: AppTerm> "->" <body: LamTerm> <end: @R> =>? {
        reparse_pi_type_hack(ByteSpan::new(start, end), binder, body)
    },
};

AppTerm: Term = {
    AtomicTerm,
    <f: AppTerm> <arg: AtomicTerm> => {
        match (f, arg) {
            (Term::Universe(s1, None), Term::Literal(s2, Literal::Int(value))) => {
                Term::Universe(s1.to(s2), Some(value as u32)) // FIXME - overflow
            },
            (f, arg) => Term::App(Box::new(f), Box::new(arg)),
        }
    },
};

AtomicTerm: Term = {
    <start: @L> "(" <term: Term> ")" <end: @R> => Term::Parens(ByteSpan::new(start, end), Box::new(term)),
    <start: @L> "Type" <end: @R> => Term::Universe(ByteSpan::new(start, end), None),
    <start: @L> "_" <end: @R> => Term::Hole(ByteSpan::new(start, end)),
    <start: @L> <value: "string literal"> <end: @R> => Term::Literal(ByteSpan::new(start, end), Literal::String(value)),
    <start: @L> <value: "character literal"> <end: @R> => Term::Literal(ByteSpan::new(start, end), Literal::Char(value)),
    <start: @L> <value: "decimal literal"> <end: @R> => Term::Literal(ByteSpan::new(start, end), Literal::Int(value)),
    <start: @L> <value: "float literal"> <end: @R> => Term::Literal(ByteSpan::new(start, end), Literal::Float(value)),
    <start: @L> <ident: Ident> <end: @R> => Term::Var(ByteSpan::new(start, end), ident),
    <start: @L> <recovered: !> <end: @R> => {
        errors.push(super::errors::from_lalrpop(filemap, recovered.error));
        Term::Error(ByteSpan::new(start, end))
    }
};

AtomicLamParam: (Vec<(ByteSpan, String)>, Option<Box<Term>>) = {
    <name: ByteSpannedIdent> => (vec![name], None),
    "(" <names: ByteSpannedIdent+> ":" <ann: PiTerm> ")" => (names, Some(Box::new(ann))),
};

ByteSpannedIdent: (ByteSpan, String) = {
    <start: @L> <ident: Ident> <end: @R> => (ByteSpan::new(start, end), ident),
};

Ident: String = {
    "identifier" => String::from(<>),
};
