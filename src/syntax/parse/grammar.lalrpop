use source::pos::BytePos;

use syntax::concrete::{Declaration, Exposing, Module, Term, ReplCommand};
use syntax::parse::{LalrpopError, ParseError, Token};

grammar<'src>();

extern {
    type Location = BytePos;
    type Error = ParseError;

    enum Token<'src> {
        // Data
        "identitfier" => Token::Ident(<&'src str>),
        "doc comment" => Token::DocComment(<&'src str>),
        "REPL command" => Token::ReplCommand(<&'src str>),
        "decimal literal" => Token::DecLiteral(<u64>),

        // Keywords
        "as" => Token::As,
        "module" => Token::Module,
        "import" => Token::Import,
        "Type" => Token::Type,

        // Symbols
        "\\" => Token::BSlash,
        ":" => Token::Colon,
        "," => Token::Comma,
        ".." => Token::DotDot,
        "=" => Token::Equal,
        "->" => Token::LArrow,
        "=>" => Token::LFatArrow,
        ";" => Token::Semi,

        // Delimiters
        "(" => Token::LParen,
        ")" => Token::RParen,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "[" => Token::LBracket,
        "]" => Token::RBracket,
    }
}

pub ReplCommand: ReplCommand = {
    => ReplCommand::NoOp,
    <term: Term> => ReplCommand::Eval(Box::new(term)),
    <command: "REPL command"> =>? match command {
        ":?" | ":h" | ":help" => Ok(ReplCommand::Help),
        ":q" | ":quit" => Ok(ReplCommand::Quit),
        _ => Err(LalrpopError::User {
            error: ParseError::UnknownReplCommand(String::from(command)),
        }),
    },
    <command: "REPL command"> <term: Term> =>? match command {
        ":t" | ":type" => Ok(ReplCommand::TypeOf(Box::new(term))),
        _ => Err(LalrpopError::User {
            error: ParseError::UnknownReplCommand(String::from(command)),
        }),
    },
};

pub Module: Module = {
    "module" <name: Ident> ";" <declarations: Declaration*> => {
        Module { name, declarations }
    },
};

pub Declaration: Declaration = {
    "import" <name: Ident> <rename: ("as" <Ident>)?> <exposing: Exposing?> ";" => {
        Declaration::Import(name, rename, exposing)
    },
    <name: Ident> ":" <term: Term> ";" => {
        Declaration::Claim(name, term)
    },
    <name: Ident> <params: AtomicLamParam*> "=" <term: Term> ";" => {
        Declaration::Definition(name, params, term)
    },
};

Exposing : Exposing = {
    "(" ".." ")" => Exposing::All,
    "(" <names: (<ExposedIdent> ",")*> <last: ExposedIdent> => {
        let mut names = names;
        names.push(last);
        Exposing::Exact(names)
    }
};

ExposedIdent : (String, Option<String>) = {
    <Ident> <("as" <Ident>)?>
};

pub Term: Term = {
    LamTerm,
    <x: LamTerm> ":" <t: Term> => {
        Term::Ann(Box::new(x), Box::new(t))
    },
};

LamTerm: Term = {
    PiTerm,
    "\\" <name: Ident> ":" <ann: PiTerm> "=>" <body: LamTerm> => {
        Term::Lam(vec![(vec![name], Some(Box::new(ann)))], Box::new(body))
    },
    "\\" <params: AtomicLamParam+> "=>" <body: LamTerm> => {
        Term::Lam(params, Box::new(body))
    },
};

PiTerm: Term = {
    AppTerm,
    // Naively we would want to write the following rules:
    //
    // ```lalrpop
    // "(" <names: Ident+> ":" <ann: PiTerm> ")" "->" <body: LamTerm> => {
    //      Term::Pi(names, Box::new(ann), Box::new(body))
    //  },
    //  <ann: AppTerm> "->" <body: LamTerm> => {
    //      Term::Arrow(Box::new(ann), Box::new(body))
    //  },
    // ```
    //
    // Alas this causes an ambiguity with the `AtomicTerm` rule. Therefore we
    // have to hack this in by reparsing the binder:
    <binder: AppTerm> "->" <body: LamTerm> =>? {
        super::reparse_pi_type_hack(binder, body)
    },
    "Type" <level: "decimal literal"> => {
        Term::Universe(Some(level as u32))
    },
};

AppTerm: Term = {
    AtomicTerm,
    <f: AppTerm> <arg: AtomicTerm> => {
        Term::App(Box::new(f), Box::new(arg))
    },
};

AtomicTerm: Term = {
    "(" <Term> ")" => Term::Parens(Box::new(<>)),
    "Type" => Term::Universe(None),
    Ident => Term::Var(<>),
};

AtomicLamParam: (Vec<String>, Option<Box<Term>>) = {
    <name: Ident> => (vec![name], None),
    "(" <names: Ident+> ":" <ann: PiTerm> ")" => (names, Some(Box::new(ann))),
};

Ident: String = {
    "identitfier" => String::from(<>),
};
