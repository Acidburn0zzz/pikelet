use parse::Term;

grammar();

pub Term: Term = {
    LamTerm,
    // Annotated terms
    <x: Term> ":" <t: LamTerm> => {
        Term::Ann(Box::new(x), Box::new(t))
    },
};

LamTerm : Term = {
    PiTerm,
    <b: LamBind> "=>" <body: LamTerm> => Term::Lam(b.0, b.1, Box::new(body)),
};

PiTerm : Term = {
    AppTerm,
    <b: PiBind> "->" <body: LamTerm> => Term::Pi(b.0, b.1, Box::new(body)),
};

AppTerm: Term = {
    AtomicTerm,
    // Applications
    <f: AppTerm> <x: AtomicTerm> => {
        Term::App(Box::new(f), Box::new(x)).into()
    },
};

AtomicTerm: Term = {
    "(" <Term> ")",
    "Type" => Term::Type,
    Ident => Term::Var(<>).into(),
};

LamBind : (String, Option<Box<Term>>) = {
    r"\\" <x: Ident> => (x, None),
    r"\\" <x: Ident> ":" <t: PiTerm> => (x, Some(Box::new(t))),
};

PiBind : (Option<String>, Box<Term>) = {
    <t: AppTerm> => (None, Box::new(t)),
    "[" <x: Ident> ":" <t: PiTerm> "]" => (Some(x), Box::new(t)),
};

Ident: String = {
    r"[a-zA-Z][a-zA-Z0-9]*" => String::from(<>),
};
